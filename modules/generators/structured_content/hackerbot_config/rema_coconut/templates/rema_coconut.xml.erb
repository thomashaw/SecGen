<%
	require 'json'
  require 'securerandom'
  require 'digest/sha1'
  require 'fileutils'
  require 'erb'
	require 'openssl'

  if self.accounts.empty?
    abort('Sorry, you need to provide an account')
  end
	$coconut_config = JSON.parse(self.coconut_config)
	$first_account = JSON.parse(self.accounts.first)

	$main_user = $first_account['username'].to_s

	$root_password = self.root_password
	$desktop_ip = self.desktop_ip
	$hackerbot_server_ip = self.hackerbot_server_ip
	$victim_server_ip = self.victim_server_ip
	$flags = self.flags

	$path_to_sample = "/home/#{$main_user}/malware/coconut"

	$welcome_msg_code = $coconut_config['welcome_msg_code']
	$http_bd_port = $coconut_config['http_bd_port']
	$bd_timeout = $coconut_config['bd_timeout']
	$icmp_bd_port = $coconut_config['icmp_bd_port']
	$bind_bd_port = $coconut_config['bind_bd_port']
	$transport_port = $coconut_config['transport_port']
	$bd_password = $coconut_config['bd_password']

	$q_bindport_rand = rand(1024..49151)

	REQUIRED_FLAGS = 11
  while $flags.length < REQUIRED_FLAGS
    $flags << "flag{#{SecureRandom.hex}}"
    Print.err "Warning: Not enough flags provided to hackerbot_config generator, some flags won't be tracked/marked!"
  end

  def get_binding
    binding
  end
-%>
<?xml version="1.0"?>

<hackerbot
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://www.github/cliffe/SecGen/hackerbot">
<!--<hackerbot xmlns="http://www.github/cliffe/SecGen/hackerbotz"-->

	<name>Hackerbot</name>

	<AIML_chatbot_rules>config/AIML</AIML_chatbot_rules>

	<!--Method for gaining shell access, can be overwritten per-attack-->
	<get_shell>sshpass -p <%= $root_password %> ssh -oStrictHostKeyChecking=no root@{{chat_ip_address}} /bin/bash</get_shell>

	<messages>
    <show_attack_numbers />

		<greeting>Your system is about to be hacked. I'll do what I can hold them off, but you are going to have to work with me to protect yourself. I'll cough up some flags if you work with me.</greeting>

		<!--Must provide alternatives for each message-->
		<say_ready>Let me know when you are 'ready', if you want to move on to another attack, say 'next', or 'previous' and I'll move things along.</say_ready>
		<say_ready>When you are ready, simply say 'ready'.</say_ready>
		<say_ready>'Ready'?</say_ready>
		<say_ready>Better hurry, the attack is imminent... Let me know when you're 'ready'.</say_ready>
		<next>Ok, I'll do what I can to move things along...</next>
		<next>Moving things along to the next attack...</next>
		<next>Ok, next attack...</next>
		<previous>Ok, I'll do what I can to back things up...</previous>
		<previous>Ok, previous attack...</previous>
		<previous>Ok, backing up.</previous>
		<goto>Ok, skipping it along.</goto>
		<goto>Let me see what I can do to goto that attack.</goto>
		<last_attack>That was the last attack for now. You can rest easy, until next time... (End.)</last_attack>
		<last_attack>That was the last attack. Game over?</last_attack>
		<first_attack>You are back to the beginning!</first_attack>
		<first_attack>This is where it all began.</first_attack>
		<getting_shell>Ok. Gaining shell access, and running post command...</getting_shell>
		<getting_shell>Hacking in progress...</getting_shell>
		<getting_shell>Attack underway...</getting_shell>
		<getting_shell>Here we go...</getting_shell>
		<got_shell>We are in to your system.</got_shell>
		<got_shell>You are pwned.</got_shell>
		<got_shell>We have shell.</got_shell>
		<repeat>Let me know when you are 'ready', if you want to move on to another attack, say 'next', or 'previous' and I'll move things along.</repeat>
		<repeat>Say 'ready', 'next', or 'previous'.</repeat>

		<!--Single responses:-->
		<help>I am waiting for you to say 'ready', 'next', 'previous', 'list', 'goto *X*', or 'answer *X*'</help>
		<say_answer>Say "The answer is *X*".</say_answer>
		<no_quiz>There is no question to answer</no_quiz>
		<correct_answer>Correct</correct_answer>
		<incorrect_answer>Incorrect</incorrect_answer>
		<invalid>That's not possible.</invalid>
		<non_answer>Wouldn't you like to know.</non_answer>

		<!--can be overwritten per-attack-->
		<shell_fail_message>Oh no. Failed to get shell... You need to let us in.</shell_fail_message>
	</messages>

	<tutorial_info>
		<title>REMA Malware Behaviour - Coconut</title>
		<tutorial><%= ERB.new(File.read self.templates_path + 'intro.md.erb').result(self.get_binding) %></tutorial>
		<footer>
<%= File.read self.templates_path + 'resources.md.erb' %>
|
<%= File.read self.templates_path + 'license.md.erb' %>

Randomised instance generated by [SecGen](http://github.com/cliffe/SecGen) (<%= Time.new.to_s %>)
		</footer>

		<provide_tutorial>true</provide_tutorial>

	</tutorial_info>

	<attack>
		<!-- topic: Packer identification -->
		<prompt>I have a question that will require you to perform some analysis on the coconut malware sample, found at: <%= $path_to_sample %></prompt>
		<suppress_command_output_feedback/>
		<pre_shell>echo 'OK'</pre_shell>
		<get_shell>false</get_shell>
		<post_command/>

		<condition>
			<output_matches>OK</output_matches>
			<message>OK...</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>OK..</output_matches>
			<message>OK..</message>
			<trigger_quiz />
		</condition>
		<else_condition>
			<message>Something went wrong.</message>
		</else_condition>

		<quiz>
			<question>What is the name of the packing software used to compress the code in the coconut malware sample?</question>
			<answer>UPX</answer>
			<correct_answer_response>Well done:) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack />
		</quiz>
	</attack>

	<attack>
		<!-- topic: Open port identification -->
		<prompt>The next question is related to the state of the infected system. Perform a network scan to assist you with the following question.</prompt>
		<suppress_command_output_feedback/>
		<pre_shell>echo 'OK'</pre_shell>
		<get_shell>false</get_shell>
		<post_command/>

		<condition>
			<output_matches>OK</output_matches>
			<message>OK...</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>OK..</output_matches>
			<message>OK..</message>
			<trigger_quiz />
		</condition>
		<else_condition>
			<message>Something went wrong.</message>
		</else_condition>

		<quiz>
			<question>How many TCP ports are open on the infected system?</question>
			<answer>2</answer>
			<correct_answer_response>Well done:) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack />
		</quiz>
	</attack>

	<attack>
		<!-- topic: Open port identification -->
		<prompt>The next question is related to the state of the infected system. Perform a network scan to assist you with the following question.</prompt>
		<suppress_command_output_feedback/>
		<pre_shell>echo 'OK'</pre_shell>
		<get_shell>false</get_shell>
		<post_command/>

		<condition>
			<output_matches>OK</output_matches>
			<message>OK...</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>OK..</output_matches>
			<message>OK..</message>
			<trigger_quiz />
		</condition>
		<else_condition>
			<message>Something went wrong.</message>
		</else_condition>

		<quiz>
			<question>Which port has the malware sample opened on the infected system?</question>
			<answer><%= $http_bd_port %></answer>
			<correct_answer_response>Well done:) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack />
		</quiz>
	</attack>

	<attack>
		<!-- topic: icmp_shell function -->
		<prompt>I have another question that will require you to perform further analysis on the coconut malware sample, found at: <%= $path_to_sample %></prompt>
		<suppress_command_output_feedback/>
		<pre_shell>echo 'OK'</pre_shell>
		<get_shell>false</get_shell>
		<post_command/>

		<condition>
			<output_matches>OK</output_matches>
			<message>OK...</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>OK..</output_matches>
			<message>OK..</message>
			<trigger_quiz />
		</condition>
		<else_condition>
			<message>Something went wrong.</message>
		</else_condition>

		<quiz>
			<question>What is the name of the function that launches the icmp shell? (include brackets, e.g. "The answer is function_name()").</question>
			<answer>icmp_shell()</answer>
			<correct_answer_response>Well done:) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack />
		</quiz>
	</attack>

	<attack>
		<!-- topic: icmp_shell port -->
		<prompt>I have another question that will require you to perform further analysis on the coconut malware sample, found at: <%= $path_to_sample %></prompt>
		<suppress_command_output_feedback/>
		<pre_shell>echo 'OK'</pre_shell>
		<get_shell>false</get_shell>
		<post_command/>

		<condition>
			<output_matches>OK</output_matches>
			<message>OK...</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>OK..</output_matches>
			<message>OK..</message>
			<trigger_quiz />
		</condition>
		<else_condition>
			<message>Something went wrong.</message>
		</else_condition>

		<quiz>
			<question>Which port does the ICMP backdoor open a shell on?</question>
			<answer><%= $icmp_bd_port %></answer>
			<correct_answer_response>Well done:) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack />
		</quiz>
	</attack>

	<attack>
		<!-- topic: shell timeout -->
		<prompt>This question is related to the activity timeout on the shell sessions.</prompt>
		<suppress_command_output_feedback/>
		<pre_shell>echo 'OK'</pre_shell>
		<get_shell>false</get_shell>
		<post_command/>

		<condition>
			<output_matches>OK</output_matches>
			<message>OK...</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>OK..</output_matches>
			<message>OK..</message>
			<trigger_quiz />
		</condition>
		<else_condition>
			<message>Something went wrong.</message>
		</else_condition>

		<quiz>
			<question>How many seconds does the bind shell backdoor stay active for, before automatically closing due to inactivity? (e.g. "The answer is n", where n is the number of seconds as an integer)</question>
			<answer><%= $bd_timeout %></answer>
			<correct_answer_response>Well done:) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack />
		</quiz>
	</attack>

	<attack>
		<!-- topic: shell timeout -->
		<prompt>This question is related to the password used to access the shell sessions.</prompt>
		<suppress_command_output_feedback/>
		<pre_shell>echo 'OK'</pre_shell>
		<get_shell>false</get_shell>
		<post_command/>

		<condition>
			<output_matches>OK</output_matches>
			<message>OK...</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>OK..</output_matches>
			<message>OK..</message>
			<trigger_quiz />
		</condition>
		<else_condition>
			<message>Something went wrong.</message>
		</else_condition>

		<quiz>
			<question>What is the password used to access the backdoor shell?</question>
			<answer><%= $bd_password %></answer>
			<correct_answer_response>Well done:) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack />
		</quiz>
	</attack>

	<attack>
		<!-- topic: shell timeout -->
		<prompt>The next question is related the backdoor shell session.</prompt>
		<suppress_command_output_feedback/>
		<pre_shell>echo 'OK'</pre_shell>
		<get_shell>false</get_shell>
		<post_command/>

		<condition>
			<output_matches>OK</output_matches>
			<message>OK...</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>OK..</output_matches>
			<message>OK..</message>
			<trigger_quiz />
		</condition>
		<else_condition>
			<message>Something went wrong.</message>
		</else_condition>

		<quiz>
			<question>What is the code attached to the welcome message that is presented to the user when they successfully access the backdoor?</question>
			<answer><%= $welcome_msg_code %></answer>
			<correct_answer_response>Well done:) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack />
		</quiz>
	</attack>

	<attack>
		<!-- topic: binding shell to specific port -->
		<prompt>The next question is related the http backdoor's bind shell functionality.</prompt>
		<suppress_command_output_feedback/>
		<pre_shell>echo 'OK'</pre_shell>
		<get_shell>false</get_shell>
		<post_command/>

		<condition>
			<output_matches>OK</output_matches>
			<message>OK...</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>OK..</output_matches>
			<message>OK..</message>
			<trigger_quiz />
		</condition>
		<else_condition>
			<message>Something went wrong.</message>
		</else_condition>

		<quiz>
			<question>The http backdoor contains functionality to open a bind shell on a specified port. Which URL can be accessed over HTTP to trigger the malware sample to open a bind shell backdoor on port <%= $q_bindport_rand %>?</question>
			<answer><%= $victim_server_ip %>:<%= $http_bd_port %>/bindport:<%= $q_bindport_rand %></answer>
			<correct_answer_response>Well done:) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack />
		</quiz>
	</attack>

	<attack>
		<!-- topic: exfiltration -->
		<prompt>This challenge will require you to use one of the backdoors (of your choosing) to exfiltrate a file from the infected system. One of the users has a file containing top secret information within their home directory. Find the file and store a local copy on your VM at the path: /home/<%= $main_user %>/top_secret_file</prompt>
		<suppress_command_output_feedback/>
		<post_command>shasum /home/<%= $main_user %>/top_secret_file</post_command>

		<condition>
			<output_matches>OK</output_matches>
			<message>Ok...</message>
		</condition>
		<condition>
			<output_matches>9737a2f11c391517bc23b8f77d441f7c3d27e545 /home/<%=$main_user %>/top_secret_file</output_matches>
			<message>Well done :) <%=$flags.pop %></message>
		</condition>
		<else_condition>
			<message>Your top_secret_file does not contain the same data as the server's.</message>
		</else_condition>
	</attack>


	<attack>
		<!-- topic: yara rules -->
		<prompt>This challenge involves create a yara rule to detect the malware sample. Create a file containing your yara rule at /home/<%=$main_user %>/coconut.yara</prompt>
		<suppress_command_output_feedback/>
		<post_command>echo "OK"</post_command>

		<condition>
			<output_matches>OK</output_matches>
			<message>Well done :) <%=$flags.pop %></message>
		</condition>
		<else_condition>
			<message>Something was wrong with your rule.</message>
		</else_condition>
	</attack>

</hackerbot>