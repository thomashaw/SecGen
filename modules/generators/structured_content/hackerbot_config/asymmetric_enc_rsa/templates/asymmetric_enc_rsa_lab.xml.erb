<%
  require 'json'
  require 'securerandom'
  require 'digest/sha1'
  require 'fileutils'
  require 'erb'
	require 'openssl'

  if self.accounts.empty?
    abort('Sorry, you need to provide an account')
  end
	$first_account = JSON.parse(self.accounts.first)

	$main_user = $first_account['username'].to_s

	$root_password = self.root_password
	$desktop_ip = self.desktop_ip
	$hackerbot_server_ip = self.hackerbot_server_ip
	$flags = self.flags

	$chall_1_path = "/home/#{$main_user}/attack_1"

	$chall_2_path = "/home/#{$main_user}/attack_2"
	$chall_2_msg = SecureRandom.hex(4)

	# TODO: Delete below here

	$answer_1 = SecureRandom.hex(4)
	$decode_1 = Base64.strict_encode64 $answer_1

	$encode_1 = SecureRandom.hex(4)
	$answer_2 = Base64.strict_encode64 $encode_1

	$xor_1_a = SecureRandom.hex(4)
	$xor_1_b = SecureRandom.hex(8)
	$answer_3 = ($xor_1_a.to_i(16) ^ $xor_1_b.to_i(16)).to_s(16)

	$xor_2_a = SecureRandom.hex(4)
	$xor_2_b = rand(255).to_s
	$answer_4 = ($xor_2_a.to_i(16) ^ ($xor_2_a.length * $xor_2_b.to_i(16)))


	$hex_to_file_1 = SecureRandom.hex(8)
	$hex_to_file_path = "/home/#{$main_user}/binary1"


	REQUIRED_FLAGS = 5
  while $flags.length < REQUIRED_FLAGS
    $flags << "flag{#{SecureRandom.hex}}"
    Print.err "Warning: Not enough flags provided to hackerbot_config generator, some flags won't be tracked/marked!"
  end

  def get_binding
    binding
  end
-%>
<?xml version="1.0"?>

<hackerbot
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://www.github/cliffe/SecGen/hackerbot">
<!--<hackerbot xmlns="http://www.github/cliffe/SecGen/hackerbotz"-->

	<name>Hackerbot</name>

	<AIML_chatbot_rules>config/AIML</AIML_chatbot_rules>

	<!--Method for gaining shell access, can be overwritten per-attack-->
	<!--<get_shell>bash</get_shell>-->
	<get_shell>sshpass -p <%= $root_password %> ssh -oStrictHostKeyChecking=no root@{{chat_ip_address}} /bin/bash</get_shell>
<!--	<get_shell>false</get_shell>-->

	<messages>
    <show_attack_numbers />

		<greeting>Your system is about to be hacked. I'll do what I can hold them off, but you are going to have to work with me to protect yourself. I'll cough up some flags if you work with me.</greeting>

		<!--Must provide alternatives for each message-->
		<say_ready>Let me know when you are 'ready', if you want to move on to another attack, say 'next', or 'previous' and I'll move things along.</say_ready>
		<say_ready>When you are ready, simply say 'ready'.</say_ready>
		<say_ready>'Ready'?</say_ready>
		<say_ready>Better hurry, the attack is imminent... Let me know when you're 'ready'.</say_ready>
		<next>Ok, I'll do what I can to move things along...</next>
		<next>Moving things along to the next attack...</next>
		<next>Ok, next attack...</next>
		<previous>Ok, I'll do what I can to back things up...</previous>
		<previous>Ok, previous attack...</previous>
		<previous>Ok, backing up.</previous>
		<goto>Ok, skipping it along.</goto>
		<goto>Let me see what I can do to goto that attack.</goto>
		<last_attack>That was the last attack for now. You can rest easy, until next time... (End.)</last_attack>
		<last_attack>That was the last attack. Game over?</last_attack>
		<first_attack>You are back to the beginning!</first_attack>
		<first_attack>This is where it all began.</first_attack>
		<getting_shell>Ok. Gaining shell access, and running post command...</getting_shell>
		<getting_shell>Hacking in progress...</getting_shell>
		<getting_shell>Attack underway...</getting_shell>
		<getting_shell>Here we go...</getting_shell>
		<got_shell>We are in to your system.</got_shell>
		<got_shell>You are pwned.</got_shell>
		<got_shell>We have shell.</got_shell>
		<repeat>Let me know when you are 'ready', if you want to move on to another attack, say 'next', or 'previous' and I'll move things along.</repeat>
		<repeat>Say 'ready', 'next', or 'previous'.</repeat>

		<!--Single responses:-->
		<help>I am waiting for you to say 'ready', 'next', 'previous', 'list', 'goto *X*', or 'answer *X*'</help>
		<say_answer>Say "The answer is *X*".</say_answer>
		<no_quiz>There is no question to answer</no_quiz>
		<correct_answer>Correct</correct_answer>
		<incorrect_answer>Incorrect</incorrect_answer>
		<invalid>That's not possible.</invalid>
		<non_answer>Wouldn't you like to know.</non_answer>

		<!--can be overwritten per-attack-->
		<shell_fail_message>Oh no. Failed to get shell... You need to let us in.</shell_fail_message>
	</messages>

	<tutorial_info>
		<title>Public-key Cryptography - Asymmetric Key Encryption with RSA</title>
		<tutorial><%= ERB.new(File.read self.templates_path + 'intro.md.erb').result(self.get_binding) %></tutorial>
		<footer>
<%= File.read self.templates_path + 'resources.md.erb' %>
|
<%= File.read self.templates_path + 'license.md.erb' %>

Randomised instance generated by [SecGen](http://github.com/cliffe/SecGen) (<%= Time.new.to_s %>)
		</footer>

		<provide_tutorial>true</provide_tutorial>

	</tutorial_info>

	<attack>

		<prompt>Create a public and private RSA key pair within the <%= $chall_1_path %> directory using the file names key.pub and key.priv for the public and private key respectively.</prompt>
		<post_command>grep 'BEGIN RSA PRIVATE KEY' <%=$chall_1_path %>/key.priv > /dev/null; priv=$?; grep 'BEGIN PUBLIC KEY' <%=$chall_1_path %>/key.pub > /dev/null; pub=$?; echo $priv$pub</post_command>
		<condition>
			<output_matches>22</output_matches>
			<message>You have not created a public and private RSA key in the specified directory using the file names provided.</message>
		</condition>
		<condition>
			<output_matches>02</output_matches>
			<message>You created your private key file, but not the public key file.</message>
		</condition>
		<condition>
			<output_matches>10</output_matches>
			<mesage>Something was not quite right with your private key file</mesage>
		</condition>
		<condition>
			<output_matches>01</output_matches>
			<mesage>Something was not quite right with your public key file</mesage>
		</condition>
		<condition>
			<output_matches>00</output_matches>
			<message>Well done :) <%= $flags.pop %></message>
			<trigger_quiz/>
		</condition>
		<else_condition>
			<message>Something was not quite right...</message>
		</else_condition>

		<tutorial><%= ERB.new(File.read self.templates_path + 'rsa_openssl_example.md.erb').result(self.get_binding) %></tutorial>
	</attack>

	<attack>

		<pre_shell>echo 'OK'</pre_shell>
		<get_shell>false</get_shell>
		<post_command></post_command>

		<prompt>Create another public and private RSA key pair within the <%= $chall_2_path %> directory using the file names key.pub and key.priv for the public and private key respectively. Encrypt a message file containing "<%= $chall_2_msg %>" using the public key and store it in <%= $chall_2_path %>/message.enc</prompt>
		<post_command></post_command>
		<condition>
			<output_matches>10</output_matches>
			<mesage>Something was not quite right with your private key file</mesage>
		</condition>
		<condition>
			<output_matches>01</output_matches>
			<mesage>Something was not quite right with your public key file</mesage>
		</condition>
		<condition>
			<output_matches>00</output_matches>
			<message>Well done :) <%= $flags.pop %></message>
			<trigger_quiz/>
		</condition>
		<else_condition>
			<message>Something was not quite right...</message>
		</else_condition>

	</attack>


	<attack>
		<!-- topic: -->

		<pre_shell>echo 'OK'</pre_shell>
		<get_shell>false</get_shell>
		<post_command></post_command>

		<prompt>TODO</prompt>

		<condition>
			<output_matches>OK</output_matches>
			<message>OK... your turn.</message>
			<trigger_quiz/>
		</condition>
		<condition>
			<output_matches>ok</output_matches>
			<mesage>ok... your turn.</mesage>
			<trigger_quiz/>
		</condition>
		<else_condition>
			<message>else..</message>
			<trigger_quiz />
		</else_condition>
		<quiz>
			<question>TODO</question>
			<answer>TODO</answer>
			<correct_answer_response> :) <%= $flags.pop %></correct_answer_response>
		</quiz>
		<tutorial><%= ERB.new(File.read self.templates_path + 'rsa_python3_example.md.erb').result(self.get_binding) %></tutorial>
	</attack>

</hackerbot>