<%
  require 'json'
  require 'securerandom'
  require 'digest/sha1'
  require 'fileutils'
  require 'erb'
	require 'openssl'

  if self.accounts.empty?
    abort('Sorry, you need to provide an account')
  end
	$first_account = JSON.parse(self.accounts.first)

	$main_user = $first_account['username'].to_s

	$root_password = self.root_password
	$desktop_ip = self.desktop_ip
	$hackerbot_server_ip = self.hackerbot_server_ip
	$flags = self.flags

	$chall_1_path = "/home/#{$main_user}/challenge_1"

	$chall_2_path = "/home/#{$main_user}/challenge_2"
	$chall_2_msg = SecureRandom.hex(4)

	$chall_3_message = self.chall_3_msg
	$chall_3_ciphertext = encrypt_rsa($chall_3_message, 5, 161)

	$chall_4_message = SecureRandom.hex(2)
	$chall_4_ciphertext = encrypt_rsa($chall_4_message, 5, 161)

	$chall_5_message = rand(1..9)
	$chall_5_ciphertext = encrypt_rsa_byte($chall_5_message, 3, 15)

	$chall_6_message = rand(1..9)
	$chall_6_ciphertext = encrypt_rsa_byte($chall_6_message, 3, 15)

	$chall_7_message = rand(1..9)
	$chall_7_ciphertext = encrypt_rsa_byte($chall_7_message, 11, 7*17)

	$chall_8_message = rand(1..9)
	$chall_8_ciphertext = encrypt_rsa_byte($chall_8_message, 11, 7*17)

	$chall_9_message = rand(1..9)
	$chall_9_ciphertext = encrypt_rsa_byte($chall_9_message, 17, 47*59)

	$chall_10_message = rand(1..9)
	$chall_10_ciphertext = encrypt_rsa_byte($chall_10_message, 17, 47*59)

	REQUIRED_FLAGS = 12

  while $flags.length < REQUIRED_FLAGS
    $flags << "flag{#{SecureRandom.hex}}"
    Print.err "Warning: Not enough flags provided to hackerbot_config generator, some flags won't be tracked/marked!"
  end

  def get_binding
    binding
  end

-%>
<?xml version="1.0"?>

<hackerbot
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://www.github/cliffe/SecGen/hackerbot">
<!--<hackerbot xmlns="http://www.github/cliffe/SecGen/hackerbotz"-->

	<name>Hackerbot</name>

	<AIML_chatbot_rules>config/AIML</AIML_chatbot_rules>

	<!--Method for gaining shell access, can be overwritten per-attack-->
	<!--<get_shell>bash</get_shell>-->
	<get_shell>sshpass -p <%= $root_password %> ssh -oStrictHostKeyChecking=no root@{{chat_ip_address}} /bin/bash</get_shell>
<!--	<get_shell>false</get_shell>-->

	<messages>
    <show_attack_numbers />

		<greeting>Your system is about to be hacked. I'll do what I can hold them off, but you are going to have to work with me to protect yourself. I'll cough up some flags if you work with me.</greeting>

		<!--Must provide alternatives for each message-->
		<say_ready>Let me know when you are 'ready', if you want to move on to another attack, say 'next', or 'previous' and I'll move things along.</say_ready>
		<say_ready>When you are ready, simply say 'ready'.</say_ready>
		<say_ready>'Ready'?</say_ready>
		<say_ready>Better hurry, the attack is imminent... Let me know when you're 'ready'.</say_ready>
		<next>Ok, I'll do what I can to move things along...</next>
		<next>Moving things along to the next attack...</next>
		<next>Ok, next attack...</next>
		<previous>Ok, I'll do what I can to back things up...</previous>
		<previous>Ok, previous attack...</previous>
		<previous>Ok, backing up.</previous>
		<goto>Ok, skipping it along.</goto>
		<goto>Let me see what I can do to goto that attack.</goto>
		<last_attack>That was the last attack for now. You can rest easy, until next time... (End.)</last_attack>
		<last_attack>That was the last attack. Game over?</last_attack>
		<first_attack>You are back to the beginning!</first_attack>
		<first_attack>This is where it all began.</first_attack>
		<getting_shell>Ok. Gaining shell access, and running post command...</getting_shell>
		<getting_shell>Hacking in progress...</getting_shell>
		<getting_shell>Attack underway...</getting_shell>
		<getting_shell>Here we go...</getting_shell>
		<got_shell>We are in to your system.</got_shell>
		<got_shell>You are pwned.</got_shell>
		<got_shell>We have shell.</got_shell>
		<repeat>Let me know when you are 'ready', if you want to move on to another attack, say 'next', or 'previous' and I'll move things along.</repeat>
		<repeat>Say 'ready', 'next', or 'previous'.</repeat>

		<!--Single responses:-->
		<help>I am waiting for you to say 'ready', 'next', 'previous', 'list', 'goto *X*', or 'answer *X*'</help>
		<say_answer>Say "The answer is *X*".</say_answer>
		<no_quiz>There is no question to answer</no_quiz>
		<correct_answer>Correct</correct_answer>
		<incorrect_answer>Incorrect</incorrect_answer>
		<invalid>That's not possible.</invalid>
		<non_answer>Wouldn't you like to know.</non_answer>

		<!--can be overwritten per-attack-->
		<shell_fail_message>Oh no. Failed to get shell... You need to let us in.</shell_fail_message>
	</messages>

	<tutorial_info>
		<title>Public-key Cryptography - Asymmetric Key Encryption with RSA</title>
		<tutorial><%= ERB.new(File.read self.templates_path + 'intro.md.erb').result(self.get_binding) %></tutorial>
		<footer>
<%= File.read self.templates_path + 'resources.md.erb' %>
|
<%= File.read self.templates_path + 'license.md.erb' %>

Randomised instance generated by [SecGen](http://github.com/cliffe/SecGen) (<%= Time.new.to_s %>)
		</footer>

		<provide_tutorial>true</provide_tutorial>

	</tutorial_info>

	<attack>
		<prompt>Create a public and private RSA key pair within the <%= $chall_1_path %> directory using the file names key.pub and key.priv for the public and private key respectively.</prompt>
		<post_command>grep 'BEGIN RSA PRIVATE KEY' <%=$chall_1_path %>/key.priv > /dev/null; priv=$?; grep 'BEGIN PUBLIC KEY' <%=$chall_1_path %>/key.pub > /dev/null; pub=$?; echo $priv$pub</post_command>
		<suppress_command_output_feedback/>
		<condition>
			<output_matches>22</output_matches>
			<message>You have not created a public and private RSA key in the specified directory using the file names provided.</message>
		</condition>
		<condition>
			<output_matches>02</output_matches>
			<message>You created your private key file, but not the public key file.</message>
		</condition>
		<condition>
			<output_matches>10</output_matches>
			<mesage>Something was not quite right with your private key file</mesage>
		</condition>
		<condition>
			<output_matches>01</output_matches>
			<mesage>Something was not quite right with your public key file</mesage>
		</condition>
		<condition>
			<output_matches>00</output_matches>
			<message>Well done :) <%= $flags.pop %></message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<else_condition>
			<message>Something was not quite right...</message>
		</else_condition>
		<tutorial><%= ERB.new(File.read self.templates_path + 'rsa_openssl_example.md.erb').result(self.get_binding) %></tutorial>
	</attack>

	<attack>
		<prompt>Create another public and private RSA key pair within the <%= $chall_2_path %> directory using the file names key.pub and key.priv for the public and private key respectively. Encrypt a message file containing "<%= $chall_2_msg %>" using the public key and store the encrypted message within <%= $chall_2_path %>/message.enc</prompt>
		<post_command>grep 'BEGIN RSA PRIVATE KEY' <%=$chall_2_path %>/key.priv > /dev/null; priv=$?; grep 'BEGIN PUBLIC KEY' <%=$chall_2_path %>/key.pub > /dev/null; pub=$?; ls <%= $chall_2_path %>/message.enc 2> /dev/null; mfile=$?; msg_decrypt=`openssl pkeyutl -in <%= $chall_2_path %>/message.enc -decrypt -inkey <%= $chall_2_path %>/key.priv 2>/dev/null`; echo $priv$pub$mfile$msg_decrypt</post_command>
		<suppress_command_output_feedback/>
		<condition>
			<output_equals>000<%= $chall_2_msg %></output_equals>
			<message>Well done :) <%= $flags.pop %></message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<condition>
			<output_matches>222</output_matches>
			<message>You have not created a public and private RSA key in the specified directory using the file names provided, or encrypted a message with RSA. Double check that you're working within the specified directory.</message>
		</condition>
		<condition>o
			<output_matches>022</output_matches>
			<message>You created your private key file, but not the public key file.</message>
		</condition>
		<condition>
			<output_matches>002</output_matches>
			<message>You created your public and private key file, but the encrypted message cannot be found at the specified location.</message>
		</condition>
		<condition>
			<output_matches>000</output_matches>
			<message>Something was not quite right. There was an error decrypting your encrypted message file with the private key.</message>
		</condition>
		<else_condition>
			<message>Something was not quite right...</message>
		</else_condition>
	</attack>


	<attack>
		<pre_shell>echo 'OK'</pre_shell>
		<get_shell>false</get_shell>
		<post_command></post_command>

		<prompt>Using the given values in the example above (p = 7, q = 23, N = 161, phiN = 132, e = (5,161), d = 53), decrypt the following ciphertext: "<%= $chall_3_ciphertext %>"</prompt>

		<condition>
			<output_matches>OK</output_matches>
			<message>OK...</message>
			<trigger_quiz/>
		</condition>
		<condition>
			<output_matches>ok</output_matches>
			<mesage>ok... your turn.</mesage>
			<trigger_quiz/>
		</condition>
		<else_condition>
			<message>else..</message>
			<trigger_quiz />
		</else_condition>
		<quiz>
			<question>What was the encrypted message?</question>
			<answer><%= $chall_3_message %></answer>
			<correct_answer_response> :) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack>true</trigger_next_attack>
		</quiz>
		<tutorial><%= ERB.new(File.read self.templates_path + 'rsa_python3_example.md.erb').result(self.get_binding) %></tutorial>
	</attack>


	<attack>
		<pre_shell>echo 'OK'</pre_shell>
		<get_shell>false</get_shell>
		<post_command></post_command>

		<prompt>Using the given values in the example above (p = 7, q = 23, N = 161, phiN = 132, e = (5,161), d = 53), encrypt the following message: "<%= $chall_4_message %>"</prompt>

		<condition>
			<output_matches>OK</output_matches>
			<message>OK...</message>
			<trigger_quiz/>
		</condition>
		<condition>
			<output_matches>ok</output_matches>
			<mesage>ok... your turn.</mesage>
			<trigger_quiz/>
		</condition>
		<else_condition>
			<message>else..</message>
			<trigger_quiz />
		</else_condition>
		<quiz>
			<question>What is the encrypted ciphertext?</question>
			<answer><%= $chall_4_ciphertext %></answer>
			<correct_answer_response> :) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack>true</trigger_next_attack>
		</quiz>
	</attack>

	<attack>
		<pre_shell>echo 'OK'</pre_shell>
		<get_shell>false</get_shell>
		<post_command></post_command>

		<prompt>Perform encryption using the RSA algorithm with the following values: p = 3, q = 5, e = 3, message = <%=$chall_5_message%> (the integer, not the ASCII character).</prompt>

		<condition>
			<output_matches>OK</output_matches>
			<message>OK...</message>
			<trigger_quiz/>
		</condition>
		<condition>
			<output_matches>ok</output_matches>
			<mesage>ok... your turn.</mesage>
			<trigger_quiz/>
		</condition>
		<else_condition>
			<message>else..</message>
			<trigger_quiz />
		</else_condition>
		<quiz>
			<question>What is the ciphertext?</question>
			<answer><%=$chall_5_ciphertext %></answer>
			<correct_answer_response> :) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack>true</trigger_next_attack>
		</quiz>
	</attack>
	<attack>
		<pre_shell>echo 'OK'</pre_shell>
		<get_shell>false</get_shell>
		<post_command></post_command>

		<prompt>Perform decryption using the RSA algorithm with the following values: p = 3, q = 5, e = 3, ciphertext = <%= $chall_6_ciphertext %> (raw value)</prompt>
		<condition>
			<output_matches>OK</output_matches>
			<message>OK...</message>
			<trigger_quiz/>
		</condition>
		<condition>
			<output_matches>ok</output_matches>
			<mesage>ok... your turn.</mesage>
			<trigger_quiz/>
		</condition>
		<else_condition>
			<message>else..</message>
			<trigger_quiz />
		</else_condition>
		<quiz>
			<question>What is the message?</question>
			<answer><%= $chall_6_message %></answer>
			<correct_answer_response> :) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack>true</trigger_next_attack>
		</quiz>
	</attack>
	<attack>
		<pre_shell>echo 'OK'</pre_shell>
		<get_shell>false</get_shell>
		<post_command></post_command>

		<prompt>Perform encryption using the RSA algorithm with the following values: p = 7, q = 17, e = 11, message = <%= $chall_7_message %> (the integer, not the ASCII character).</prompt>

		<condition>
			<output_matches>OK</output_matches>
			<message>OK...</message>
			<trigger_quiz/>
		</condition>
		<condition>
			<output_matches>ok</output_matches>
			<mesage>ok... your turn.</mesage>
			<trigger_quiz/>
		</condition>
		<else_condition>
			<message>else..</message>
			<trigger_quiz />
		</else_condition>
		<quiz>
			<question>What is the ciphertext?</question>
			<answer><%=$chall_7_ciphertext %></answer>
			<correct_answer_response> :) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack>true</trigger_next_attack>
		</quiz>
	</attack>
	<attack>
		<pre_shell>echo 'OK'</pre_shell>
		<get_shell>false</get_shell>
		<post_command></post_command>

		<prompt>Perform decryption using the RSA algorithm with the following values: p = 7, q = 17, e = 11, ciphertext = <%= $chall_8_ciphertext %> (raw value)</prompt>
		<condition>
			<output_matches>OK</output_matches>
			<message>OK...</message>
			<trigger_quiz/>
		</condition>
		<condition>
			<output_matches>ok</output_matches>
			<mesage>ok... your turn.</mesage>
			<trigger_quiz/>
		</condition>
		<else_condition>
			<message>else..</message>
			<trigger_quiz />
		</else_condition>
		<quiz>
			<question>What is the message?</question>
			<answer><%= $chall_8_message %></answer>
			<correct_answer_response> :) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack>true</trigger_next_attack>
		</quiz>
	</attack>
	<attack>
		<pre_shell>echo 'OK'</pre_shell>
		<get_shell>false</get_shell>
		<post_command></post_command>

		<prompt>Perform encryption using the RSA algorithm with the following values: p = 47, q = 59, e = 17, message = <%= $chall_9_message %> (the integer, not the ASCII character).</prompt>

		<condition>
			<output_matches>OK</output_matches>
			<message>OK...</message>
			<trigger_quiz/>
		</condition>
		<condition>
			<output_matches>ok</output_matches>
			<mesage>ok... your turn.</mesage>
			<trigger_quiz/>
		</condition>
		<else_condition>
			<message>else..</message>
			<trigger_quiz />
		</else_condition>
		<quiz>
			<question>What is the ciphertext?</question>
			<answer><%=$chall_9_ciphertext %></answer>
			<correct_answer_response> :) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack>true</trigger_next_attack>
		</quiz>
	</attack>
	<attack>
		<pre_shell>echo 'OK'</pre_shell>
		<get_shell>false</get_shell>
		<post_command></post_command>

		<prompt>Perform decryption using the RSA algorithm with the following values: p = 47, q = 59, d = 157, ciphertext = "<%= $chall_10_ciphertext%>"</prompt>
		<condition>
			<output_matches>OK</output_matches>
			<message>OK...</message>
			<trigger_quiz/>
		</condition>
		<condition>
			<output_matches>ok</output_matches>
			<mesage>ok... your turn.</mesage>
			<trigger_quiz/>
		</condition>
		<else_condition>
			<message>else..</message>
			<trigger_quiz />
		</else_condition>
		<quiz>
			<question>What is the message?</question>
			<answer><%= $chall_10_message %></answer>
			<correct_answer_response> :) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack>true</trigger_next_attack>
		</quiz>
	</attack>


	<attack>
		<pre_shell>echo 'OK'</pre_shell>
		<get_shell>false</get_shell>
		<post_command></post_command>

		<prompt>Given these values, what would be the suitable values for e?: p = 7, q = 11</prompt>
		<condition>
			<output_matches>OK</output_matches>
			<message>OK...</message>
			<trigger_quiz/>
		</condition>
		<condition>
			<output_matches>ok</output_matches>
			<mesage>ok... your turn.</mesage>
			<trigger_quiz/>
		</condition>
		<else_condition>
			<message>else..</message>
			<trigger_quiz />
		</else_condition>
		<quiz>
			<question>What are the suitable values for e? (include spaces in your response and ensure the values are in ascending order, e.g. "The answer is 1 2 3")</question>
			<answer>13 17 19 23 29 31 37 41 43 47 53 59</answer>
			<correct_answer_response> :) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack>true</trigger_next_attack>
		</quiz>
	</attack>
	<attack>
		<pre_shell>echo 'OK'</pre_shell>
		<get_shell>false</get_shell>
		<post_command></post_command>

		<prompt>Given these values, what is d?: p = 7, q = 11, e = 13</prompt>
		<condition>
			<output_matches>OK</output_matches>
			<message>OK...</message>
			<trigger_quiz/>
		</condition>
		<condition>
			<output_matches>ok</output_matches>
			<mesage>ok... your turn.</mesage>
			<trigger_quiz/>
		</condition>
		<else_condition>
			<message>else..</message>
			<trigger_quiz />
		</else_condition>
		<quiz>
			<question>What is d?</question>
			<answer>37</answer>
			<correct_answer_response> :) <%= $flags.pop %></correct_answer_response>
		</quiz>
	</attack>
</hackerbot>