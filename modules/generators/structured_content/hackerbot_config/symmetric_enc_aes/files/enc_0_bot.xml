<?xml version="1.0"?>

<hackerbot
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.github/cliffe/SecGen/hackerbot">
  <!--<hackerbot xmlns="http://www.github/cliffe/SecGen/hackerbotz"-->

  <name>Hackerbot</name>

  <AIML_chatbot_rules>config/AIML</AIML_chatbot_rules>

  <!--Method for gaining shell access, can be overwritten per-attack-->
  <!--<get_shell>bash</get_shell>-->
  <!--	<get_shell>sshpass -p  ssh -oStrictHostKeyChecking=no root@{{chat_ip_address}} /bin/bash</get_shell>-->
  <get_shell>false</get_shell>

  <messages>
    <show_attack_numbers />

    <greeting>Your system is about to be hacked. I'll do what I can hold them off, but you are going to have to work with me to protect yourself. I'll cough up some flags if you work with me.</greeting>

    <!--Must provide alternatives for each message-->
    <say_ready>Let me know when you are 'ready', if you want to move on to another attack, say 'next', or 'previous' and I'll move things along.</say_ready>
    <say_ready>When you are ready, simply say 'ready'.</say_ready>
    <say_ready>'Ready'?</say_ready>
    <say_ready>Better hurry, the attack is imminent... Let me know when you're 'ready'.</say_ready>
    <next>Ok, I'll do what I can to move things along...</next>
    <next>Moving things along to the next attack...</next>
    <next>Ok, next attack...</next>
    <previous>Ok, I'll do what I can to back things up...</previous>
    <previous>Ok, previous attack...</previous>
    <previous>Ok, backing up.</previous>
    <goto>Ok, skipping it along.</goto>
    <goto>Let me see what I can do to goto that attack.</goto>
    <last_attack>That was the last attack for now. You can rest easy, until next time... (End.)</last_attack>
    <last_attack>That was the last attack. Game over?</last_attack>
    <first_attack>You are back to the beginning!</first_attack>
    <first_attack>This is where it all began.</first_attack>
    <getting_shell>Ok. Gaining shell access, and running post command...</getting_shell>
    <getting_shell>Hacking in progress...</getting_shell>
    <getting_shell>Attack underway...</getting_shell>
    <getting_shell>Here we go...</getting_shell>
    <got_shell>We are in to your system.</got_shell>
    <got_shell>You are pwned.</got_shell>
    <got_shell>We have shell.</got_shell>
    <repeat>Let me know when you are 'ready', if you want to move on to another attack, say 'next', or 'previous' and I'll move things along.</repeat>
    <repeat>Say 'ready', 'next', or 'previous'.</repeat>

    <!--Single responses:-->
    <help>I am waiting for you to say 'ready', 'next', 'previous', 'list', 'goto *X*', or 'answer *X*'</help>
    <say_answer>Say "The answer is *X*".</say_answer>
    <no_quiz>There is no question to answer</no_quiz>
    <correct_answer>Correct</correct_answer>
    <incorrect_answer>Incorrect</incorrect_answer>
    <invalid>That's not possible.</invalid>
    <non_answer>Wouldn't you like to know.</non_answer>

    <!--can be overwritten per-attack-->
    <shell_fail_message>Oh no. Failed to get shell... You need to let us in.</shell_fail_message>
  </messages>

  <tutorial_info>
    <title>Symmetric Encryption with Advanced Encryption Standard (AES)</title>
    <tutorial># Symmetric Encryption with Advanced Encryption Standard (AES)

      ## Getting started
      ### VMs in this lab

      ==Start these VMs== (if you haven't already):
      - hackerbot_server (leave it running, you don't log into this)
      - desktop

      ### Your login details for the "desktop" VM
      User: zu
      Password: tiaspbiqe2r (**t**his **i**s **a** **s**ecure **p**assword **b**ut **i**s **q**uite **e**asy **2** **r**emember)

      You won't login to the hackerbot_server, but the VM needs to be running to complete the lab.

      ### For marks in the module
      1. **You need to submit flags**. Note that the flags and the challenges in your VMs are different to other's in the class. Flags will be revealed to you as you complete challenges throughout the module. Flags look like this: ==flag{*somethingrandom*}==. Follow the link on the module page to submit your flags.
      2. **You need to document the work and your solutions in a Log Book**. This needs to include screenshots (including the flags) of how you solved each Hackerbot challenge and a writeup describing your solution to each challenge, and answering any "Log Book Questions". The Log Book will be submitted later in the semester.

      ## Meet Hackerbot!
      ![small-right](images/skullandusb.svg)

      This exercise involves Hackerbot, a chatbot who will interact with you and your system. If you satisfy Hackerbot by completing the challenges she will reveal flags to you.

      **On the desktop VM:**

      ==Open Pidgin and send some messages to Hackerbot:==

      - Try asking Hackerbot some questions
      - Send "help"
      - Send "list"
      - Send "hello"

      Work through the below exercises, completing the Hackerbot challenges as noted.

      ---

      ## 0: Learning Objectives/Outcomes

      The learning outcomes and objectives for this lab are:

      - Understand the difference between Encoding and Encryption
      - Understand the use difference between Symmetric key and Asymmetric key encryption, and the different use-cases
      - Historical examples of Symmetric Key Encryption
      - - Asymmetric encryption modes:
      - Cipher Block Chaining (CBC)
      - Electronic Code Book (ECB)
      - Modern Symmetric Key Encryption with AES (Advanced Encryption Standard) cipher
      - Applying AES to confidentially encrypt and decrypt data


    </tutorial>
    <footer>
      ## Resources

      An excellent resource on the subject of integrity management is Chapter 20 of the excellent book *Practical Unix &amp; Internet Security, 3rd Ed*, by Garfinkel et al (2003).

      Bind mounting: [http://lwn.net/Articles/281157/](http://lwn.net/Articles/281157/)
      |
      ## License
      This lab by [*Z. Cliffe Schreuders*](http://z.cliffe.schreuders.org) at Leeds Beckett University is licensed under a [*Creative Commons Attribution-ShareAlike 3.0 Unported License*](http://creativecommons.org/licenses/by-sa/3.0/deed.en_GB).

      Included software source code is also licensed under the GNU General Public License, either version 3 of the License, or (at your option) any later version.

      ![small](images/leedsbeckett-logo.png)


      Randomised instance generated by [SecGen](http://github.com/cliffe/SecGen) (2022-11-18 23:09:38 +0000)
    </footer>

    <provide_tutorial>true</provide_tutorial>

  </tutorial_info>

  <attack>
    <tutorial>
      Test tesst test
    </tutorial>
  </attack>


  <!--  <attack>-->
<!--    &lt;!&ndash; topic: &ndash;&gt;-->

<!--    <pre_shell>echo 'OK'</pre_shell>-->
<!--    <get_shell>false</get_shell>-->
<!--    <post_command></post_command>-->

<!--    <prompt>Using AES (in ECB mode) encrypt the following string message = V2ludGVyIGlzIGNvbWluZyE=" key= "VGhpc0lzQVNlY3JldEtleVRoaXNJc0FTZWNyZXRLZXk=" iv = " 8Etooczmfk570fx0yBVjsw==.</prompt>-->

<!--    <condition>-->
<!--      <output_matches>OK</output_matches>-->
<!--      <message>OK... your turn.</message>-->
<!--      <trigger_quiz/>-->
<!--    </condition>-->
<!--    <condition>-->
<!--      <output_matches>ok</output_matches>-->
<!--      <mesage>ok... your turn.</mesage>-->
<!--      <trigger_quiz/>-->
<!--    </condition>-->
<!--    <else_condition>-->
<!--      <message>else..</message>-->
<!--      <trigger_quiz />-->
<!--    </else_condition>-->
<!--    <quiz>-->
<!--      <question>What is the ciphertext? (answer as base64 encoded string). Answer: V2ludGVyIGlzIGNvbWluZyE=^</question>-->
<!--      <answer>$60MM8iL55DMloH1fzZ6+MA+mWAan8zMsEutpWwiHmBE=^</answer>-->
<!--      <correct_answer_response> :) flag{143aed7f94e7ae592864be4c0436be12}</correct_answer_response>-->
<!--    </quiz>-->

<!--  </attack>-->

</hackerbot>