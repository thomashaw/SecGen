<%
  require 'json'
  require 'securerandom'
  require 'digest/sha1'
  require 'fileutils'
  require 'erb'
	require 'openssl'

  if self.accounts.empty?
    abort('Sorry, you need to provide an account')
  end
	$first_account = JSON.parse(self.accounts.first)

	$main_user = $first_account['username'].to_s

	$root_password = self.root_password
	$desktop_ip = self.desktop_ip
	$hackerbot_server_ip = self.hackerbot_server_ip
	$flags = self.flags

	$enc_gpg_path = "/home/#{$main_user}/encrypt_with_gpg"
	$enc_gpg_message = SecureRandom.hex(4)
	$enc_gpg_passphrase = SecureRandom.hex(3)

	$dec_gpg_path = "/home/#{$main_user}/decrypt_with_gpg"
	$dec_gpg_message = SecureRandom.hex(4)
	$dec_gpg_passphrase = SecureRandom.hex(3)

	$dec_python_path = "/home/#{$main_user}/decrypt_with_python"
	$dec_python_message = SecureRandom.hex(8)
	$dec_python_key = SecureRandom.hex(8)

	$enc_python_path = "/home/#{$main_user}/encrypt_with_python"
	$enc_python_message = SecureRandom.hex(8)
	$enc_python_key = SecureRandom.hex(8)

	$dec_file_python_path = "/home/#{$main_user}/decrypt_file_with_python"
	$dec_file_python_message = SecureRandom.hex(8)
	$dec_file_python_key = SecureRandom.hex(8)

	$enc_file_python_path = "/home/#{$main_user}/encrypt_file_with_python"
	$enc_file_python_message = SecureRandom.hex(8)
	$enc_file_python_key = SecureRandom.hex(8)


	REQUIRED_FLAGS = 5
  while $flags.length < REQUIRED_FLAGS
    $flags << "flag{#{SecureRandom.hex}}"
    Print.err "Warning: Not enough flags provided to hackerbot_config generator, some flags won't be tracked/marked!"
  end

  def get_binding
    binding
  end
-%>
<?xml version="1.0"?>

<hackerbot
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://www.github/cliffe/SecGen/hackerbot">
<!--<hackerbot xmlns="http://www.github/cliffe/SecGen/hackerbotz"-->

	<name>Hackerbot</name>

	<AIML_chatbot_rules>config/AIML</AIML_chatbot_rules>

	<!--Method for gaining shell access, can be overwritten per-attack-->
	<get_shell>sshpass -p <%= $root_password %> ssh -oStrictHostKeyChecking=no root@{{chat_ip_address}} /bin/bash</get_shell>

	<messages>
    <show_attack_numbers />

		<greeting>Your system is about to be hacked. I'll do what I can hold them off, but you are going to have to work with me to protect yourself. I'll cough up some flags if you work with me.</greeting>

		<!--Must provide alternatives for each message-->
		<say_ready>Let me know when you are 'ready', if you want to move on to another attack, say 'next', or 'previous' and I'll move things along.</say_ready>
		<say_ready>When you are ready, simply say 'ready'.</say_ready>
		<say_ready>'Ready'?</say_ready>
		<say_ready>Better hurry, the attack is imminent... Let me know when you're 'ready'.</say_ready>
		<next>Ok, I'll do what I can to move things along...</next>
		<next>Moving things along to the next attack...</next>
		<next>Ok, next attack...</next>
		<previous>Ok, I'll do what I can to back things up...</previous>
		<previous>Ok, previous attack...</previous>
		<previous>Ok, backing up.</previous>
		<goto>Ok, skipping it along.</goto>
		<goto>Let me see what I can do to goto that attack.</goto>
		<last_attack>That was the last attack for now. You can rest easy, until next time... (End.)</last_attack>
		<last_attack>That was the last attack. Game over?</last_attack>
		<first_attack>You are back to the beginning!</first_attack>
		<first_attack>This is where it all began.</first_attack>
		<getting_shell>Ok. Gaining shell access, and running post command...</getting_shell>
		<getting_shell>Hacking in progress...</getting_shell>
		<getting_shell>Attack underway...</getting_shell>
		<getting_shell>Here we go...</getting_shell>
		<got_shell>We are in to your system.</got_shell>
		<got_shell>You are pwned.</got_shell>
		<got_shell>We have shell.</got_shell>
		<repeat>Let me know when you are 'ready', if you want to move on to another attack, say 'next', or 'previous' and I'll move things along.</repeat>
		<repeat>Say 'ready', 'next', or 'previous'.</repeat>

		<!--Single responses:-->
		<help>I am waiting for you to say 'ready', 'next', 'previous', 'list', 'goto *X*', or 'answer *X*'</help>
		<say_answer>Say "The answer is *X*".</say_answer>
		<no_quiz>There is no question to answer</no_quiz>
		<correct_answer>Correct</correct_answer>
		<incorrect_answer>Incorrect</incorrect_answer>
		<invalid>That's not possible.</invalid>
		<non_answer>Wouldn't you like to know.</non_answer>

		<!--can be overwritten per-attack-->
		<shell_fail_message>Oh no. Failed to get shell... You need to let us in.</shell_fail_message>
	</messages>

	<tutorial_info>
		<title>Symmetric Encryption with Advanced Encryption Standard (AES)</title>
		<tutorial><%= ERB.new(File.read self.templates_path + 'intro.md.erb').result(self.get_binding) %>
|
<%= ERB.new(File.read self.templates_path + 'advanced_encryption_standard.md.erb').result(self.get_binding) %></tutorial>
		<footer>
<%= File.read self.templates_path + 'resources.md.erb' %>
|
<%= File.read self.templates_path + 'license.md.erb' %>

Randomised instance generated by [SecGen](http://github.com/cliffe/SecGen) (<%= Time.new.to_s %>)
		</footer>

		<provide_tutorial>true</provide_tutorial>

	</tutorial_info>

	<attack>
		<!-- topic: use gpg with aes to encrypt a message -->
		<prompt>Using GPG with AES, encrypt the following message: "<%= $enc_gpg_message %>" using the passphrase: "<%= $enc_gpg_passphrase %>". Store the ciphertext in a file at: <%= $enc_gpg_path %>/msg.enc</prompt>
		<post_command>rm /tmp/enc_gpg_msg.dec; file <%= $enc_gpg_path %>/msg.enc | grep 'GPG.*AES'; file=$?;gpg --pinentry-mode=loopback --passphrase "<%= $enc_gpg_passphrase %>" -d -o /tmp/enc_gpg_msg.dec <%=$enc_gpg_path %>/msg.enc; dec=$?; grep "<%=$enc_gpg_message %>" /tmp/enc_gpg_msg.dec; msg=$?; echo $file$dec$msg</post_command>
		<suppress_command_output_feedback/>
		<condition>
			<output_matches>122</output_matches>
			<message>Something is not quite right. Make sure you are working within the correct directory, using the correct file name, and you're encrypting using the AES algorithm with GPG.</message>
		</condition>
		<condition>
			<output_matches>022</output_matches>
			<message>You have used the incorrect passphrase.</message>
		</condition>
		<condition>
			<output_matches>001</output_matches>
			<message>Some data has been encrypted using the correct password, but the content of the decrypted message is incorrect.</message>
		</condition>
		<condition>
			<output_matches>000</output_matches>
			<message>Well done :) <%= $flags.pop %></message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<else_condition>
			<message>Something was not quite right...</message>
		</else_condition>

		<tutorial><%= ERB.new(File.read self.templates_path + 'aes_with_gpg.md.erb').result(self.get_binding) %></tutorial>
	</attack>

	<attack>
		<!-- topic: use gpg with aes to decrypt a message -->
		<prompt>I am about to create an encrypted file on your system. Decrypt it to find a hidden message.</prompt>
		<post_command>mkdir <%= $dec_gpg_path %>; chown <%= $main_user %>:<%= $main_user %> <%= $dec_gpg_path %>; echo "<%= $dec_gpg_message %>" > /root/dec_gpg_pt; gpg --pinentry-mode=loopback --cipher-algo AES128 --symmetric --passphrase "<%= $dec_gpg_passphrase %>" -o <%= $dec_gpg_path %>/msg.enc /root/dec_gpg_pt; rm /root/dec_gpg_pt; echo "OK"</post_command>

		<condition>
			<output_matches>OK</output_matches>
			<message>The file at <%= $dec_gpg_path %>/msg.enc has been encrypted with GPG using AES. Decrypt the file using the passphrase: <%= $dec_gpg_passphrase %>.</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>OK..</output_matches>
			<message>The file at <%= $dec_gpg_path %>/msg.enc has been encrypted with GPG using AES. Decrypt the file using the passphrase: <%= $dec_gpg_passphrase %>.</message>
			<trigger_quiz />
		</condition>
		<else_condition>
			<message>The file at <%= $dec_gpg_path %>/msg.enc has been encrypted with GPG using AES. Decrypt the file using the passphrase: <%= $dec_gpg_passphrase %></message>
		</else_condition>

		<quiz>
			<question>What was the encrypted message?</question>
			<answer><%= $dec_gpg_message %></answer>
			<correct_answer_response>:) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack />
		</quiz>

	</attack>

	<attack>
		<!-- topic: -->

		<post_command>mkdir <%= $dec_python_path %>; python3 -c 'from Cryptodome.Cipher import AES;m=b"<%= $dec_python_message %>";k=b"<%= $dec_python_key %>";e=AES.new(k, AES.MODE_ECB); print(e.encrypt(m));' > <%= $dec_python_path %>/ciphertext; chown -R <%= $main_user %>:<%= $main_user %> <%= $dec_gpg_path %>;echo "OK"</post_command>

		<prompt>I am going to create a file on your system containing ciphertext in a hexadecimal representation at <%= $dec_python_path %>/ciphertext. Use Python3 and Cipherdome with AES in CBC mode and the key b"<%= $dec_python_key %>" to decrypt the message.</prompt>

		<condition>
			<output_matches>OK</output_matches>
			<message>OK... your turn.</message>
			<trigger_quiz/>
		</condition>
		<condition>
			<output_matches>ok</output_matches>
			<mesage>ok... your turn.</mesage>
			<trigger_quiz/>
		</condition>
		<else_condition>
			<message>else..</message>
			<trigger_quiz />
		</else_condition>
		<quiz>
			<question>What is the decrypted message?</question>
			<answer><%= $dec_python_message %></answer>
			<correct_answer_response> :) <%= $flags.pop %></correct_answer_response>
		</quiz>

		<tutorial><%= ERB.new(File.read self.templates_path + 'aes_with_python3.md.erb').result(self.get_binding) %></tutorial>
	</attack>

	<attack>
		<!-- topic: -->

		<pre_shell>echo 'OK'</pre_shell>
		<get_shell>false</get_shell>
		<post_command></post_command>

		<prompt>Attack 4 - TODO</prompt>

		<condition>
			<output_matches>OK</output_matches>
			<message>OK... your turn.</message>
			<trigger_quiz/>
		</condition>
		<condition>
			<output_matches>ok</output_matches>
			<mesage>ok... your turn.</mesage>
			<trigger_quiz/>
		</condition>
		<else_condition>
			<message>else..</message>
			<trigger_quiz />
		</else_condition>
		<quiz>
			<question>asdf</question>
			<answer>asdf</answer>
			<correct_answer_response> :) <%= $flags.pop %></correct_answer_response>
		</quiz>

		<tutorial><%= ERB.new(File.read self.templates_path + 'aes_file_enc_python3.md.erb').result(self.get_binding) %></tutorial>
	</attack>

	<attack>
		<!-- topic: -->

		<pre_shell>echo 'OK'</pre_shell>
		<get_shell>false</get_shell>
		<post_command></post_command>

		<prompt>Attack 5+ - TODO [1..n] on fundamentals (matrices, XOR, substitution with s-box, etc.)</prompt>

		<condition>
			<output_matches>OK</output_matches>
			<message>OK... your turn.</message>
			<trigger_quiz/>
		</condition>
		<condition>
			<output_matches>ok</output_matches>
			<mesage>ok... your turn.</mesage>
			<trigger_quiz/>
		</condition>
		<else_condition>
			<message>else..</message>
			<trigger_quiz />
		</else_condition>
		<quiz>
			<question>asdf</question>
			<answer>asdf</answer>
			<correct_answer_response> :) <%= $flags.pop %></correct_answer_response>
		</quiz>
	</attack>

</hackerbot>