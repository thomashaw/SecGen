<%
  require 'json'
  require 'securerandom'
  require 'digest/sha1'
  require 'fileutils'
  require 'erb'
	require 'openssl'

  if self.accounts.empty?
    abort('Sorry, you need to provide an account')
  end

	$aes_challenges = self.aes_challenges


	$chal_1 = JSON.parse(Base64.strict_decode64(self.aes_challenges[0]))
	$key_1 = Base64.strict_decode64 $chal_1['key']
	$iv_1 = Base64.strict_decode64 $chal_1['iv']
	$ct_1 = Base64.strict_decode64 $chal_1['ciphertext']
	$msg_1 = Base64.strict_decode64 $chal_1['message']

	$first_account = JSON.parse(self.accounts.first)

  $main_user = $first_account['username'].to_s

  $root_password = self.root_password
  $flags = self.flags

	REQUIRED_FLAGS = 5
  while $flags.length < REQUIRED_FLAGS
    $flags << "flag{#{SecureRandom.hex}}"
    Print.err "Warning: Not enough flags provided to hackerbot_config generator, some flags won't be tracked/marked!"
  end

  def get_binding
    binding
  end
-%>
<?xml version="1.0"?>

<hackerbot
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://www.github/cliffe/SecGen/hackerbot">
<!--<hackerbot xmlns="http://www.github/cliffe/SecGen/hackerbotz"-->

	<name>Hackerbot</name>

	<AIML_chatbot_rules>config/AIML</AIML_chatbot_rules>

	<!--Method for gaining shell access, can be overwritten per-attack-->
	<!--<get_shell>bash</get_shell>-->
<!--	<get_shell>sshpass -p <%#= $root_password %> ssh -oStrictHostKeyChecking=no root@{{chat_ip_address}} /bin/bash</get_shell>-->
	<get_shell>false</get_shell>

	<messages>
    <show_attack_numbers />

		<greeting>Your system is about to be hacked. I'll do what I can hold them off, but you are going to have to work with me to protect yourself. I'll cough up some flags if you work with me.</greeting>

		<!--Must provide alternatives for each message-->
		<say_ready>Let me know when you are 'ready', if you want to move on to another attack, say 'next', or 'previous' and I'll move things along.</say_ready>
		<say_ready>When you are ready, simply say 'ready'.</say_ready>
		<say_ready>'Ready'?</say_ready>
		<say_ready>Better hurry, the attack is imminent... Let me know when you're 'ready'.</say_ready>
		<next>Ok, I'll do what I can to move things along...</next>
		<next>Moving things along to the next attack...</next>
		<next>Ok, next attack...</next>
		<previous>Ok, I'll do what I can to back things up...</previous>
		<previous>Ok, previous attack...</previous>
		<previous>Ok, backing up.</previous>
		<goto>Ok, skipping it along.</goto>
		<goto>Let me see what I can do to goto that attack.</goto>
		<last_attack>That was the last attack for now. You can rest easy, until next time... (End.)</last_attack>
		<last_attack>That was the last attack. Game over?</last_attack>
		<first_attack>You are back to the beginning!</first_attack>
		<first_attack>This is where it all began.</first_attack>
		<getting_shell>Ok. Gaining shell access, and running post command...</getting_shell>
		<getting_shell>Hacking in progress...</getting_shell>
		<getting_shell>Attack underway...</getting_shell>
		<getting_shell>Here we go...</getting_shell>
		<got_shell>We are in to your system.</got_shell>
		<got_shell>You are pwned.</got_shell>
		<got_shell>We have shell.</got_shell>
		<repeat>Let me know when you are 'ready', if you want to move on to another attack, say 'next', or 'previous' and I'll move things along.</repeat>
		<repeat>Say 'ready', 'next', or 'previous'.</repeat>

		<!--Single responses:-->
		<help>I am waiting for you to say 'ready', 'next', 'previous', 'list', 'goto *X*', or 'answer *X*'</help>
		<say_answer>Say "The answer is *X*".</say_answer>
		<no_quiz>There is no question to answer</no_quiz>
		<correct_answer>Correct</correct_answer>
		<incorrect_answer>Incorrect</incorrect_answer>
		<invalid>That's not possible.</invalid>
		<non_answer>Wouldn't you like to know.</non_answer>

		<!--can be overwritten per-attack-->
		<shell_fail_message>Oh no. Failed to get shell... You need to let us in.</shell_fail_message>
	</messages>

	<tutorial_info>
		<title>Symmetric Encryption with Advanced Encryption Standard (AES)</title>
<!--		<tutorial><%#= ERB.new(File.read self.templates_path + 'intro.md.erb').result(self.get_binding) %></tutorial>-->
		<tutorial>Tutorial within tutorial info at the start</tutorial>

		<footer>
			Text in footer within tutorial_info

<%#= File.read self.templates_path + 'resources.md.erb' %>
<!--|-->
<%#= File.read self.templates_path + 'license.md.erb' %>

<!--Randomised instance generated by [SecGen](http://github.com/cliffe/SecGen) (<%#= Time.new.to_s %>)-->
		</footer>

		<provide_tutorial>true</provide_tutorial>

	</tutorial_info>

	<!-- Example one: text in tutorial within an attack -->

	<attack>
		<tutorial>

			example of tutorial within attack tags, without an attack

		</tutorial>
	</attack>


	<!-- example two: text in tutorial with an attack -->



	<attack>
		<prompt>example 2's prompt - just prompt and tutorial here within an attack</prompt>
		<tutorial>example 2's tutorial</tutorial>
	</attack>

	<!-- example 3: -->




<!--	<attack>-->
		<!-- topic: -->

<!--		<pre_shell>echo 'OK'</pre_shell>-->
<!--		<get_shell>false</get_shell>-->
<!--		<post_command></post_command>-->

<!--		<prompt>Using AES (in ECB mode) encrypt the following string message = <%#= $chal_1['message'] %>" key= "<%#= $chal_1['key'] %>" iv = " <%#= $chal_1['iv'] %>.</prompt>-->

<!--		<condition>-->
<!--			<output_matches>OK</output_matches>-->
<!--			<message>OK... your turn.</message>-->
<!--			<trigger_quiz/>-->
<!--		</condition>-->
<!--		<condition>-->
<!--			<output_matches>ok</output_matches>-->
<!--			<mesage>ok... your turn.</mesage>-->
<!--			<trigger_quiz/>-->
<!--		</condition>-->
<!--		<else_condition>-->
<!--			<message>else..</message>-->
<!--			<trigger_quiz />-->
<!--		</else_condition>-->
<!--		<quiz>-->
<!--			<question>What is the ciphertext? (answer as base64 encoded string). Answer: <%#= $chal_1['message'] %>^</question>-->
<!--			<answer>$<%#= $chal_1['ciphertext'] %>^</answer>-->
<!--			<correct_answer_response> :) <%#= $flags.pop %></correct_answer_response>-->
<!--		</quiz>-->

<!--	</attack>-->

</hackerbot>
