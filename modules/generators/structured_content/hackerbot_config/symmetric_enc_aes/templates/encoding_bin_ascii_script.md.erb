#### Programatically Encoding Binary and ASCII

Here is another binary message to decode:

``

Whilst this example uses python3, a popular cross-platform scripting language, to encode and decode between binary and ASCII data. You are free to do the following exercise in any programming language of your choice, using libraries to assist you.

Create a file called encoder.py with a text editor of your choice and paste the following template code in:

Source: https://stackoverflow.com/questions/7396849/convert-binary-to-ascii-and-vice-versa/7397689#7397689

```python
import binascii

def text_to_bits(text, encoding='utf-8', errors='surrogatepass'):
    bits = bin(int(binascii.hexlify(text.encode(encoding, errors)), 16))[2:]
    return bits.zfill(8 * ((len(bits) + 7) // 8))

def text_from_bits(bits, encoding='utf-8', errors='surrogatepass'):
    n = int(bits, 2)
    return int2bytes(n).decode(encoding, errors)

def int2bytes(i):
    hex_string = '%x' % i
    n = len(hex_string)
    return binascii.unhexlify(hex_string.zfill(n + (n & 1)))

def text_from_bits(bits, encoding='utf-8', errors='surrogatepass'):
    n = int(bits, 2)
    return int2bytes(n).decode(encoding, errors)

binary_string_to_encode = ""  # TASK: Add the string to decode provided above within the quotations here

print(binary_string_to_encode)
```

>Run the script with `python3 encoder.py` to verify our binary string is being stored in the variable and printed out correctly.

To test the text_from_bits function works, add the following two lines print the first 2 characters of our string out.

```python
...

print(text_from_bits("00100010"))
print(text_from_bits("01010100"))
```

> Run the script again with `python3 encoder.py` and verify the first two binary bytes have been converted to ascii

Let's try print them side by side, rather than one character per line:

print(text_from_bits("00100010 01010100"))

Oops - looks like an error!

```bash
root@kali:~# python3 encoder.py
Traceback (most recent call last):
  File "/root/encoder.py", line 24, in <module>
    print(text_from_bits("01001100 01000010"))
  File "/root/encoder.py", line 17, in text_from_bits
    n = int(bits, 2)
ValueError: invalid literal for int() with base 2: '01001100 01000010'
```

Can you see why Try update the ?

Spoiler: Try remove the space character from your binary string like so: `print(text_from_bits("0100110001000010"))`

Now that we can see this works, we'll need to ensure our binary_string_to_encode has no spaces in it, before passing it to the text_from_bits() function.

Test out the example below:

```python3
...
binary_string_to_encode = "01100101 01111000 01100001 01101101 01110000 01101100 01100101".replace(" ", "") # the string "example"
print(binary_string_to_encode)
```

Now try print the whole string at once.

> Update your script to add the .replace(" ","") call to the end of your binary_string_to_decode to remove all spaces.
> Add the following line to the bottom of your script to reveal the full message.
`print(text_from_bits(string_to_encode))`

==Logbook Task: Include screenshot evidence of your python code, along with your script running to print the ASCII text in your logbook==