#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/time.h>
#define USERDEF AAAAAA

char msg[] =
 "In this level, we will be using timing functions to thwart debuggers.  To\n"
 "get the correct passcode, you must carefully navigate around this check.\n"
 "Be careful how you bypass the check since the code that is generated is\n"
 "entangled in the timing check.\n\n";

/* Symbolic execution trap */
void print_msg() {
  unsigned int i,h1,h2;
  unsigned int len=strlen(msg);
  for (i = 0; i < 100*len; i++) {
    h1 += msg[i%len] + msg[(i+1)%len];
    h2 += msg[(i+1)%len] + msg[(i+2)%len];
  }
  if (h1 == h2)
    printf("%s",msg);
  else
    printf("%s",msg);
}

struct timeval start;
struct timeval end;
struct timeval diff;
int check=USERDEF;
int addmore=0;

int entangledDebuggerCheck() {
  addmore += 5;
  gettimeofday(&end, NULL);
  timersub(&end,&start,&diff);
#ifdef DEBUG
  printf("%d %d\n",(unsigned int) diff.tv_sec, (unsigned int) diff.tv_usec);
#endif
  if (diff.tv_usec > 50) {
	printf("No debugging please\n");
	exit(0);
  }
  return addmore;
}

int main(int argc, char** argv) {
	int code;

	print_msg();
        printf("Enter the password: ");
        scanf("%d", &code);
	gettimeofday(&start, NULL);
	code += entangledDebuggerCheck();
        if (code == check)
               	printf("Good Job.\n");
        else
		printf("Try again.\n");
        return 0;
}
