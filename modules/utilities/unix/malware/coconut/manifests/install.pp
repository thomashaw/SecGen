class coconut::install {
  $secgen_parameters = secgen_functions::get_parameters($::base64_inputs_file)
  $coconut_config = parsejson($secgen_parameters['coconut_config'][0])
  $account = parsejson($secgen_parameters['account'][0])
  $username = $account['username']
  $include_source = str2bool($coconut_config['include_source'])
  $pack_binary = str2bool($coconut_config['pack_binary'])
  $welcome_msg_code = $coconut_config['welcome_msg_code']
  $bd_timeout = $coconut_config['bd_timeout']
  $http_bd_port = $coconut_config['http_bd_port']
  $icmp_bd_port = $coconut_config['icmp_bd_port']
  $bind_bd_port = $coconut_config['bind_bd_port']
  $transport_port = $coconut_config['transport_port']
  $bd_password = $coconut_config['bd_password']

  # Generate the C file (either in the home directory or the supplied storage_directory)
  $install_dir = "/home/$username/malware"
  $c_file_path = "$install_dir/coconut.c"

  # Create install dir
  ::secgen_functions::create_directory { "create_$install_dir":
    path => $install_dir,
    notify => File["create $install_dir/coconut.c"],
  }

  # Create C file
  file { "create $install_dir/coconut.c":
    path                    => $c_file_path,
    # source                 => 'puppet:///modules/coconut/coconut.c',
    content                 => template('coconut/coconut.c.erb'),
    mode                    => '0777',
  }

  # Compile binary
  exec { "gcc $install_dir/coconut.c":
    cwd     => $install_dir,
    command => "/usr/bin/gcc -o coconut_unpacked coconut.c -lpthread",
    require => File["create $install_dir/coconut.c"],
  }

  if $pack_binary {
    # Pack with upx
    notice("Packing Coconut binary with UPX")
    ensure_packages('upx-ucl')
    exec { "upx $install_dir/coconut":
      cwd     => $install_dir,
      command => "/usr/bin/upx -o coconut coconut_unpacked",
      require => Exec["gcc $install_dir/coconut.c"]
    }
    unless $include_source {
      notice("Removing coconut.c source code file")
      exec { "Removing coconut.c file":
        cwd => $install_dir,
        command => "/bin/rm $install_dir/coconut.c",
        require => Exec["upx $install_dir/coconut"],
      }
    }
    exec { "rm unpacked binary":
      cwd => $install_dir,
      command => "/bin/rm $install_dir/coconut_unpacked",
      require => Exec["upx $install_dir/coconut"]
    }
  } else {
    notice("No packer used, renaming Coconut binary")
    exec { "rename unpacked binary":
      cwd => $install_dir,
      command => "/bin/mv $install_dir/coconut_unpacked $install_dir/coconut",
    }
    unless $include_source {
      notice("Removing coconut.c source code file")
      exec { "Removing coconut.c file":
        cwd => $install_dir,
        command => "/bin/rm $install_dir/coconut.c",
        require => Exec["rename unpacked binary"]
      }
    }
  }
}
